1
00:00:00,380 --> 00:00:07,720
Mobius 使用缩进进行区块划界，当将线添加到过程中时，它会自动完成。 

2
00:00:07,720 --> 00:00:21,040
对于可以嵌套在另一个中的条件和循环等控制结构，类似于将语句添加到特定行的方式，请确保选中该行并单击感兴趣的语句以添加它。 

3
00:00:21,160 --> 00:00:28,920
本视频还将讨论基本嵌套控制语句的逻辑：在条件内嵌套条件和循环内的条件。 

4
00:00:30,480 --> 00:00:33,250
循环嵌套将在下周讨论。 

5
00:00:34,540 --> 00:00:37,750
条件可嵌套在另一个条件块中。 

6
00:00:37,750 --> 00:00:46,370
它的执行遵循逻辑树，可以在我们期待输入的多个状态并为每个条件返回不同的输出时使用。 

7
00:00:47,540 --> 00:00:53,050
例如，假设我们有一篮红苹果，青苹果，橙子和柠檬。 

8
00:00:54,940 --> 00:00:58,540
我们希望将它们分别排序成单独的篮子。 

9
00:00:59,700 --> 00:01:04,740
我们可以通过确定食物是否是苹果来开始状态检查。 

10
00:01:04,740 --> 00:01:07,270
如果是，我们检查它的颜色。 

11
00:01:07,400 --> 00:01:14,240
如果它是红色的，我们把它放在第一个篮子里。 如果绿色，在第二个篮子。 

12
00:01:14,240 --> 00:01:18,730
否则，如果果果是橙色的，放置在第三个篮子。 

13
00:01:18,730 --> 00:01:25,380
在这一点上，如果一个水果没有通过检查，将其放在第四个篮子里。 这是为了柠檬。 

14
00:01:25,380 --> 00:01:32,110
我们已经结束了与早期只检查单一水果块, 但我们想要的是检查整个篮子! 

15
00:01:32,110 --> 00:01:36,530
从本质上讲，这个排序块应该运行在篮子里的每一个水果。 

16
00:01:36,530 --> 00:01:42,880
要做到这一点，我们将循环通过篮子一次在一个水果，并运行检查。 

17
00:01:42,880 --> 00:01:48,870
您只需将我们之前创建的条件块放入循环中即可执行此操作。 

