1
00:00:03,000 --> 00:00:08,973
Mobius uses indentation for block delimitation and it's done automatically when a line is added to the procedure.

2
00:00:08,973 --> 00:00:09,673


3
00:00:10,340 --> 00:00:14,736
For control structures like conditions and loops which can be nested in one another,

4
00:00:14,736 --> 00:00:17,812
similar to how you add a statement to a specific line,

5
00:00:17,812 --> 00:00:21,988
ensure the line is selected and click on the interested statement to add it in.

6
00:00:21,988 --> 00:00:22,688


7
00:00:23,780 --> 00:00:31,241
This video will also discuss the logic of basic nested control statements: nesting conditions within conditions and conditions within loops.

8
00:00:31,241 --> 00:00:31,941


9
00:00:33,100 --> 00:00:35,410
Loop nesting will be discussed next week.

10
00:00:35,410 --> 00:00:36,110


11
00:00:37,160 --> 00:00:40,286
Conditions can be nested within another condition block.

12
00:00:40,286 --> 00:00:40,986


13
00:00:40,986 --> 00:00:47,964
Its execution follows logic tree and can be used when we are expecting multiple states for the inputs and returning a different output for each condition.

14
00:00:47,964 --> 00:00:48,664


15
00:00:50,160 --> 00:00:51,242
For example,

16
00:00:51,242 --> 00:00:53,183
suppose we have a basket of red apples,

17
00:00:53,183 --> 00:00:54,297
green apples,

18
00:00:54,297 --> 00:00:55,602
oranges and lemons.

19
00:00:55,602 --> 00:00:56,302


20
00:00:57,560 --> 00:01:00,991
We want to sort them separately into individual baskets.

21
00:01:00,991 --> 00:01:01,691


22
00:01:02,320 --> 00:01:06,902
We may start off the condition check by identifying whether the food is an apple.

23
00:01:06,902 --> 00:01:07,602


24
00:01:07,602 --> 00:01:07,698
If it is,

25
00:01:07,698 --> 00:01:09,007
we check for its color.

26
00:01:09,007 --> 00:01:09,707


27
00:01:10,020 --> 00:01:11,207
If it is red,

28
00:01:11,207 --> 00:01:13,033
we put it in the first basket.

29
00:01:13,033 --> 00:01:14,071
If green,

30
00:01:14,071 --> 00:01:15,559
in the second basket.

31
00:01:15,559 --> 00:01:16,259


32
00:01:16,259 --> 00:01:16,584
Otherwise,

33
00:01:16,584 --> 00:01:17,972
if the fruit is an orange,

34
00:01:17,972 --> 00:01:19,360
place in the third basket.

35
00:01:19,360 --> 00:01:20,060


36
00:01:20,100 --> 00:01:21,338
At this point,

37
00:01:21,338 --> 00:01:23,076
if a fruit fails the check,

38
00:01:23,076 --> 00:01:24,930
place it in the fourth basket.

39
00:01:24,930 --> 00:01:26,476
That's for the lemons.

40
00:01:26,476 --> 00:01:27,176


41
00:01:27,176 --> 00:01:30,018
The block we had ended with earlier only checks for single fruit,

42
00:01:30,018 --> 00:01:32,444
but what we want is to check an entire basket!

43
00:01:32,444 --> 00:01:33,144


44
00:01:33,720 --> 00:01:34,835
Essentially,

45
00:01:34,835 --> 00:01:37,680
this sorting block should be run on every fruit in the basket.

46
00:01:37,680 --> 00:01:38,380


47
00:01:38,840 --> 00:01:40,011
To do this,

48
00:01:40,011 --> 00:01:43,844
we will loop through the basket at one fruit at a time and run the check.

49
00:01:43,844 --> 00:01:44,544


50
00:01:44,600 --> 00:01:49,473
You will just be placing the condition block we have created earlier into a loop to do so.

51
00:01:49,473 --> 00:01:50,173


